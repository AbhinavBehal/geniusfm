{"version":3,"sources":["NowPlaying.js","genius.js","trackLoader.js","App.js","serviceWorker.js","index.js"],"names":["NowPlaying","react_default","a","createElement","className","alt","src","this","props","track","image","title","artist","album","lyrics","Component","Genius","token","Object","classCallCheck","path","url","includes","concat","fetch","response","json","result","console","log","error","Error","error_description","meta","status","message","searchPath","request","songPath","hits","api_path","slice","song","scrapeLyrics","assign","id","referents","completeUrl","text","parsed","cheerio","load","trim","_callee","username","currentTrack","genius","regenerator_default","wrap","_context","prev","next","sent","abrupt","recenttracks","nowplaying","process","name","primary_artist","length","stop","loadInfo","_x","_loadInfo","apply","arguments","App","_this","possibleConstructorReturn","getPrototypeOf","call","usernameSubmitted","e","state","value","preventDefault","asyncToGenerator","mark","trackLoader","setState","submitted","usernameChanged","target","onSubmit","type","placeholder","onChange","src_NowPlaying_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d3cf1f0.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './NowPlaying.css'\r\n\r\nclass NowPlaying extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"now-playing\">\r\n\t\t\t\t<h2>now playing</h2>\r\n\t\t\t\t<div className=\"album-art\">\r\n\t\t\t\t\t<div className=\"album-img\">\r\n\t\t\t\t\t\t<img alt=\"album art\" src={this.props.track.image}></img>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"info\">\r\n\t\t\t\t\t\t<span><b>{this.props.track.title}</b></span>\r\n\t\t\t\t\t\t<span>by <b>{this.props.track.artist}</b></span>\r\n\t\t\t\t\t\t<span>on <b>{this.props.track.album}</b></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"lyrics\">\r\n\t\t\t\t\t\t<span>{this.props.track.lyrics}</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div >\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default NowPlaying;","import cheerio from 'cheerio'\r\n\r\nclass Genius {\r\n  constructor(token) {\r\n    this.token = token;\r\n  }\r\n\r\n  async request(path) {\r\n    const url = path.includes('?') ?\r\n      `https://api.genius.com/${path}&access_token=${this.token}`\r\n      : `https://api.genius.com/${path}?access_token=${this.token}`;\r\n    const response = await fetch(url);\r\n    const result = await response.json();\r\n    console.log(result);\r\n\r\n    if (result.error) {\r\n      throw new Error(`${result.error}: ${result.error_description}`);\r\n    }\r\n    if (result.meta.status !== 200) {\r\n      throw new Error(`${result.meta.status}: ${result.meta.message}`);\r\n    }\r\n    return result.response;\r\n  }\r\n\r\n  async song(title, artist) {\r\n    const searchPath = `search?q=\"${title} by ${artist}\"`;\r\n    const songPath = (await this.request(searchPath)).hits[0].result.api_path.slice(1);\r\n    const { song } = await this.request(songPath);\r\n    const lyrics = await this.scrapeLyrics(song.url);\r\n    return Object.assign({ lyrics }, song);\r\n  }\r\n\r\n  async referents(id) {\r\n    const path = `referents?song_id=${id}&text_format=html`;\r\n    return (await this.request(path)).referents;\r\n  }\r\n\r\n  async scrapeLyrics(url) {\r\n    const completeUrl = `https://cors-anywhere.herokuapp.com/${url}`;\r\n    const response = await fetch(completeUrl);\r\n    const text = await response.text();\r\n    const parsed = cheerio.load(text);\r\n    return parsed('.lyrics')\r\n      .text()\r\n      .trim();\r\n  }\r\n}\r\n\r\nexport default Genius;","import Genius from './genius';\r\n\r\nexport async function loadInfo(username) {\r\n  const response = await fetch(\r\n    'https://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&user='\r\n    + username\r\n    + '&api_key='\r\n    + process.env.REACT_APP_LAST_FM_API_KEY\r\n    + '&format=json'\r\n  );\r\n  const json = await response.json();\r\n  if (json && json.error) {\r\n    // couldn't find user or some other error\r\n    console.log(json.message);\r\n    return;\r\n  }\r\n  const currentTrack = json.recenttracks.track[0];\r\n  if (!currentTrack[\"@attr\"] || !currentTrack[\"@attr\"].nowplaying) {\r\n    console.log('not currently playing anything');\r\n    return;\r\n  }\r\n  // get lyrics\r\n  const genius = new Genius(process.env.REACT_APP_GENIUS_API_KEY);\r\n  const song = await genius.song(currentTrack.name, currentTrack.artist[\"#text\"]);\r\n  const referents = await genius.referents(song.id);\r\n  return {\r\n    title: song.title,\r\n    album: song.album.name,\r\n    artist: song.primary_artist.name,\r\n    image: currentTrack.image[currentTrack.image.length - 1][\"#text\"],\r\n    lyrics: song.lyrics,\r\n    referents: referents\r\n  };\r\n}\r\n\r\nexport default loadInfo;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport NowPlaying from './NowPlaying'\nimport trackLoader from './trackLoader';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { value: '', submitted: false, track: null };\n  }\n\n  usernameSubmitted = (e) => {\n    console.log(this.state.value);\n    e.preventDefault();\n    this.loadInfo();\n  }\n\n  loadInfo = async () => {\n    const track = await trackLoader(this.state.value);\n    this.setState({ submitted: true, track: track });\n  }\n\n  usernameChanged = (e) => {\n    this.setState({ value: e.target.value });\n    // todo: decide on what to do when there's no text\n    if (e.target.value === '') {\n      this.setState({ submitted: false });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <h1>genius.fm</h1>\n        <form className=\"user-search\" onSubmit={this.usernameSubmitted}>\n          <input type=\"text\" placeholder=\"your last.fm username\" onChange={this.usernameChanged}></input>\n        </form>\n        <div className={`container ${this.state.submitted ? 'move-up' : ''}`}>\n          {this.state.submitted && (\n            <NowPlaying track={this.state.track} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}