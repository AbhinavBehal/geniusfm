{"version":3,"sources":["NowPlaying.js","App.js","serviceWorker.js","index.js"],"names":["NowPlaying","react_default","a","createElement","className","alt","src","this","props","track","image","name","artist","album","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","usernameSubmitted","e","console","log","state","value","preventDefault","loadInfo","asyncToGenerator","regenerator_default","mark","_callee","response","json","currTrack","trackData","wrap","_context","prev","next","fetch","concat","process","sent","recenttracks","length","setState","submitted","stop","usernameChanged","target","onSubmit","type","placeholder","onChange","src_NowPlaying_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b504bee.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './NowPlaying.css'\r\n\r\nclass NowPlaying extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"now-playing\">\r\n\t\t\t\t<h2>now playing</h2>\r\n\t\t\t\t<div className=\"album-art\">\r\n\t\t\t\t\t<div className=\"album-img\">\r\n\t\t\t\t\t\t<img alt=\"album art\" src={this.props.track.image}></img>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"info\">\r\n\t\t\t\t\t\t<span><b>{this.props.track.name}</b></span>\r\n\t\t\t\t\t\t<span>by <b>{this.props.track.artist}</b></span>\r\n\t\t\t\t\t\t<span>on <b>{this.props.track.album}</b></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div >\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default NowPlaying;","import React, { Component } from 'react';\nimport './App.css';\nimport NowPlaying from './NowPlaying'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { value: '', submitted: false, track: null };\n  }\n\n  usernameSubmitted = (e) => {\n    console.log(this.state.value);\n    e.preventDefault();\n    this.loadInfo();\n  }\n\n  loadInfo = async () => {\n    const response = await fetch(`https://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&user=${this.state.value}&api_key=${process.env.REACT_APP_LAST_FM_API_KEY}&format=json`);\n    const json = await response.json();\n    const currTrack = json.recenttracks.track[0];\n    console.log(currTrack);\n    // todo: check if currently playing\n    const trackData = {\n      name: currTrack.name,\n      album: currTrack.album[\"#text\"],\n      artist: currTrack.artist[\"#text\"],\n      image: currTrack.image[currTrack.image.length - 1][\"#text\"]\n    };\n    console.log(trackData);\n    this.setState({ submitted: true, track: trackData });\n  }\n\n  usernameChanged = (e) => {\n    this.setState({ value: e.target.value });\n    // todo: decide on what to do when there's no text\n    if (e.target.value === '') {\n      this.setState({ submitted: false });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <h1>genius.fm</h1>\n        <form className=\"user-search\" onSubmit={this.usernameSubmitted}>\n          <input type=\"text\" placeholder=\"your last.fm username\" onChange={this.usernameChanged}></input>\n        </form>\n        <div className={`container ${this.state.submitted ? 'move-up' : ''}`}>\n          {this.state.submitted && (\n            <NowPlaying track={this.state.track} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}